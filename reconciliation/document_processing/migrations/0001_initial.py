# Generated by Django 5.2.3 on 2025-07-07 09:56

import django.core.validators
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ReconciliationBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_id', models.CharField(max_length=100, unique=True, verbose_name='Batch ID')),
                ('batch_name', models.CharField(max_length=255, verbose_name='Batch Name')),
                ('total_invoices', models.IntegerField(default=0, verbose_name='Total Invoices')),
                ('processed_invoices', models.IntegerField(default=0, verbose_name='Processed Invoices')),
                ('perfect_matches', models.IntegerField(default=0, verbose_name='Perfect Matches')),
                ('partial_matches', models.IntegerField(default=0, verbose_name='Partial Matches')),
                ('exceptions', models.IntegerField(default=0, verbose_name='Exceptions')),
                ('no_matches', models.IntegerField(default=0, verbose_name='No Matches')),
                ('status', models.CharField(choices=[('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='running', max_length=20, verbose_name='Status')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='Error Message')),
                ('tolerance_percentage', models.DecimalField(decimal_places=2, default=Decimal('2.00'), max_digits=5, verbose_name='Tolerance Percentage')),
                ('date_tolerance_days', models.IntegerField(default=30, verbose_name='Date Tolerance (Days)')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Started At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('started_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Started By')),
            ],
            options={
                'verbose_name': 'Reconciliation Batch',
                'verbose_name_plural': 'Reconciliation Batches',
                'db_table': 'reconciliation_batch',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='UploadHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_id', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='Batch ID')),
                ('filename', models.CharField(max_length=255, verbose_name='Filename')),
                ('file_size', models.BigIntegerField(verbose_name='File Size (bytes)')),
                ('total_records', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Total Records Processed')),
                ('successful_records', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Successful Records')),
                ('failed_records', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Failed Records')),
                ('processing_status', models.CharField(choices=[('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('partial', 'Partially Completed')], default='processing', max_length=20, verbose_name='Processing Status')),
                ('error_details', models.TextField(blank=True, null=True, verbose_name='Error Details')),
                ('uploaded_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Uploaded By')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
            ],
            options={
                'verbose_name': 'Upload History',
                'verbose_name_plural': 'Upload Histories',
                'db_table': 'upload_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attachment_number', models.CharField(choices=[('1', 'Attachment 1'), ('2', 'Attachment 2'), ('3', 'Attachment 3'), ('4', 'Attachment 4'), ('5', 'Attachment 5')], max_length=2, verbose_name='Attachment Number')),
                ('attachment_url', models.URLField(max_length=1000, verbose_name='Original Attachment URL')),
                ('file_type', models.CharField(choices=[('pdf_text', 'PDF - Text Based'), ('pdf_image', 'PDF - Image Based'), ('image', 'Image File'), ('unknown', 'Unknown/Failed')], max_length=20, verbose_name='File Processing Type')),
                ('original_file_extension', models.CharField(blank=True, help_text='Original file extension (.pdf, .jpg, .png, etc.)', max_length=10, null=True, verbose_name='Original File Extension')),
                ('vendor_name', models.CharField(blank=True, max_length=255, null=True)),
                ('vendor_pan', models.CharField(blank=True, max_length=10, null=True)),
                ('vendor_gst', models.CharField(blank=True, max_length=15, null=True)),
                ('invoice_date', models.DateField(blank=True, null=True)),
                ('invoice_number', models.CharField(blank=True, max_length=100, null=True)),
                ('po_number', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('grn_number', models.CharField(blank=True, db_index=True, max_length=200, null=True)),
                ('invoice_value_without_gst', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('cgst_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('cgst_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('sgst_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('sgst_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('igst_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('igst_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_gst_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('invoice_total_post_gst', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('items_data', models.JSONField(blank=True, null=True)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('extracted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(db_index=True, default='invoice', max_length=50, verbose_name='Type')),
                ('failure_reason', models.CharField(blank=True, max_length=100, null=True, verbose_name='Failure Reason')),
            ],
            options={
                'verbose_name': 'Invoice Data',
                'verbose_name_plural': 'Invoice Data Records',
                'db_table': 'invoice_data',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['po_number'], name='invoice_dat_po_numb_1e4a02_idx'), models.Index(fields=['invoice_number'], name='invoice_dat_invoice_630bef_idx'), models.Index(fields=['vendor_gst'], name='invoice_dat_vendor__0e8ced_idx'), models.Index(fields=['processing_status'], name='invoice_dat_process_402248_idx'), models.Index(fields=['file_type'], name='invoice_dat_file_ty_217381_idx'), models.Index(fields=['attachment_url'], name='invoice_dat_attachm_a17ef4_idx')],
            },
        ),
        migrations.CreateModel(
            name='InvoiceGrnReconciliation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('po_number', models.CharField(db_index=True, help_text='Purchase Order Number used for matching', max_length=200, verbose_name='PO Number')),
                ('grn_number', models.CharField(blank=True, db_index=True, help_text='Goods Receipt Note Number', max_length=200, null=True, verbose_name='GRN Number')),
                ('invoice_number', models.CharField(blank=True, db_index=True, help_text='Invoice Number from both sources', max_length=100, null=True, verbose_name='Invoice Number')),
                ('invoice_data_id', models.IntegerField(help_text='ID reference to the related invoice record', verbose_name='Invoice Data ID')),
                ('match_status', models.CharField(choices=[('perfect_match', 'Perfect Match'), ('partial_match', 'Partial Match'), ('amount_mismatch', 'Amount Mismatch'), ('vendor_mismatch', 'Vendor Mismatch'), ('date_mismatch', 'Date Mismatch'), ('no_grn_found', 'No GRN Found'), ('multiple_grn', 'Multiple GRN Records'), ('no_match', 'No Match')], db_index=True, default='no_match', max_length=50, verbose_name='Match Status')),
                ('vendor_match', models.BooleanField(default=False, help_text='Whether vendor names match', verbose_name='Vendor Match')),
                ('invoice_vendor', models.CharField(blank=True, max_length=255, null=True, verbose_name='Invoice Vendor')),
                ('grn_vendor', models.CharField(blank=True, max_length=255, null=True, verbose_name='GRN Vendor')),
                ('gst_match', models.BooleanField(default=False, help_text='Whether GST numbers match', verbose_name='GST Match')),
                ('invoice_gst', models.CharField(blank=True, max_length=15, null=True, verbose_name='Invoice GST')),
                ('grn_gst', models.CharField(blank=True, max_length=15, null=True, verbose_name='GRN GST')),
                ('date_valid', models.BooleanField(default=False, help_text='Whether invoice date <= GRN created date', verbose_name='Date Valid')),
                ('invoice_date', models.DateField(blank=True, null=True, verbose_name='Invoice Date')),
                ('grn_date', models.DateField(blank=True, null=True, verbose_name='GRN Created Date')),
                ('invoice_subtotal', models.DecimalField(blank=True, decimal_places=2, help_text='Invoice value without GST', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Invoice Subtotal')),
                ('invoice_cgst', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Invoice CGST')),
                ('invoice_sgst', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Invoice SGST')),
                ('invoice_igst', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Invoice IGST')),
                ('invoice_total', models.DecimalField(blank=True, decimal_places=2, help_text='Total invoice amount including GST', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Invoice Total')),
                ('grn_subtotal', models.DecimalField(blank=True, decimal_places=2, help_text='Sum of all GRN line item subtotals', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='GRN Subtotal')),
                ('grn_cgst', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='GRN Total CGST')),
                ('grn_sgst', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='GRN Total SGST')),
                ('grn_igst', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='GRN Total IGST')),
                ('grn_total', models.DecimalField(blank=True, decimal_places=2, help_text='Sum of all GRN line item totals', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='GRN Total')),
                ('subtotal_variance', models.DecimalField(blank=True, decimal_places=2, help_text='Invoice Subtotal - GRN Subtotal', max_digits=15, null=True, verbose_name='Subtotal Variance')),
                ('cgst_variance', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='CGST Variance')),
                ('sgst_variance', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='SGST Variance')),
                ('igst_variance', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='IGST Variance')),
                ('total_variance', models.DecimalField(blank=True, decimal_places=2, help_text='Invoice Total - GRN Total', max_digits=15, null=True, verbose_name='Total Variance')),
                ('total_grn_line_items', models.IntegerField(default=0, help_text='Number of GRN line items matched', verbose_name='Total GRN Line Items')),
                ('matching_method', models.CharField(blank=True, choices=[('exact_match', 'PO + GRN + Invoice Number'), ('po_grn_match', 'PO + GRN Number'), ('po_only_match', 'PO Number Only'), ('manual_match', 'Manual Override')], max_length=50, null=True, verbose_name='Matching Method')),
                ('reconciliation_notes', models.TextField(blank=True, help_text='Additional notes about the reconciliation', null=True, verbose_name='Reconciliation Notes')),
                ('tolerance_applied', models.DecimalField(decimal_places=2, default=Decimal('2.00'), help_text='Tolerance percentage applied for matching', max_digits=5, verbose_name='Tolerance Applied (%)')),
                ('approval_status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('escalated', 'Escalated')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('approved_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Approved By')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Approved At')),
                ('reconciled_at', models.DateTimeField(auto_now_add=True, verbose_name='Reconciled At')),
                ('reconciled_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Reconciled By')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_auto_matched', models.BooleanField(default=True, help_text='Whether this was automatically matched', verbose_name='Auto Matched')),
                ('requires_review', models.BooleanField(default=False, help_text='Whether this reconciliation needs manual review', verbose_name='Requires Review')),
                ('is_exception', models.BooleanField(default=False, help_text='Whether this is flagged as an exception', verbose_name='Is Exception')),
            ],
            options={
                'verbose_name': 'Invoice GRN Reconciliation',
                'verbose_name_plural': 'Invoice GRN Reconciliations',
                'db_table': 'invoice_grn_reconciliation',
                'ordering': ['-reconciled_at', 'po_number'],
                'indexes': [models.Index(fields=['po_number'], name='invoice_grn_po_numb_2d7d53_idx'), models.Index(fields=['grn_number'], name='invoice_grn_grn_num_d97c8f_idx'), models.Index(fields=['invoice_number'], name='invoice_grn_invoice_ea6a45_idx'), models.Index(fields=['match_status'], name='invoice_grn_match_s_95daa8_idx'), models.Index(fields=['approval_status'], name='invoice_grn_approva_3a3aab_idx'), models.Index(fields=['vendor_match', 'gst_match', 'date_valid'], name='invoice_grn_vendor__18dcb0_idx'), models.Index(fields=['is_exception', 'requires_review'], name='invoice_grn_is_exce_b39012_idx'), models.Index(fields=['reconciled_at'], name='invoice_grn_reconci_3c6b92_idx')],
                'unique_together': {('invoice_data_id', 'po_number')},
            },
        ),
        migrations.CreateModel(
            name='InvoiceItemData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_data_id', models.IntegerField(help_text='ID reference to the related invoice record', verbose_name='Invoice Data ID')),
                ('item_description', models.CharField(max_length=1000, verbose_name='Item Description')),
                ('hsn_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='HSN Code')),
                ('quantity', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0000'))], verbose_name='Quantity')),
                ('unit_of_measurement', models.CharField(blank=True, max_length=20, null=True, verbose_name='Unit of Measurement')),
                ('unit_price', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0000'))], verbose_name='Unit Price')),
                ('invoice_value_item_wise', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Item-wise Invoice Value')),
                ('cgst_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='CGST Rate')),
                ('cgst_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='CGST Amount')),
                ('sgst_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='SGST Rate')),
                ('sgst_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='SGST Amount')),
                ('igst_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='IGST Rate')),
                ('igst_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='IGST Amount')),
                ('total_tax_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Total Tax Amount')),
                ('item_total_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Item Total Amount')),
                ('po_number', models.CharField(blank=True, db_index=True, max_length=200, null=True, verbose_name='PO Number')),
                ('invoice_number', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Invoice Number')),
                ('vendor_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Vendor Name')),
                ('item_sequence', models.PositiveIntegerField(default=1, verbose_name='Item Sequence')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Invoice Item Data',
                'verbose_name_plural': 'Invoice Items Data',
                'db_table': 'invoice_item_data',
                'ordering': ['invoice_data_id', 'item_sequence'],
                'indexes': [models.Index(fields=['po_number'], name='invoice_ite_po_numb_2991a8_idx'), models.Index(fields=['invoice_number'], name='invoice_ite_invoice_d345b8_idx'), models.Index(fields=['hsn_code'], name='invoice_ite_hsn_cod_408402_idx'), models.Index(fields=['vendor_name'], name='invoice_ite_vendor__047635_idx'), models.Index(fields=['invoice_data_id', 'item_sequence'], name='invoice_ite_invoice_29e912_idx')],
            },
        ),
        migrations.CreateModel(
            name='ItemWiseGrn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('s_no', models.IntegerField(help_text='Serial number from the uploaded file', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Serial Number')),
                ('type', models.CharField(blank=True, help_text='Type of transaction (e.g., InterStock)', max_length=100, null=True, verbose_name='Type')),
                ('sku_code', models.CharField(blank=True, db_index=True, help_text='Stock Keeping Unit code', max_length=100, null=True, verbose_name='SKU Code')),
                ('category', models.CharField(blank=True, help_text='Product category', max_length=255, null=True, verbose_name='Category')),
                ('sub_category', models.CharField(blank=True, help_text='Product sub-category', max_length=255, null=True, verbose_name='Sub Category')),
                ('item_name', models.CharField(blank=True, help_text='Name/description of the item', max_length=500, null=True, verbose_name='Item Name')),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement (piece, kg, etc.)', max_length=50, null=True, verbose_name='Unit')),
                ('grn_no', models.CharField(blank=True, db_index=True, help_text='Goods Receipt Note Number', max_length=200, null=True, verbose_name='GRN Number')),
                ('hsn_no', models.CharField(blank=True, help_text='Harmonized System of Nomenclature code', max_length=20, null=True, verbose_name='HSN Code')),
                ('po_no', models.CharField(blank=True, db_index=True, help_text='Purchase Order Number', max_length=200, null=True, verbose_name='PO Number')),
                ('remarks', models.TextField(blank=True, help_text='Additional remarks or notes', null=True, verbose_name='Remarks')),
                ('created_by', models.CharField(blank=True, help_text='Person who created the GRN', max_length=255, null=True, verbose_name='Created By')),
                ('grn_created_at', models.DateField(blank=True, help_text='Date when GRN was created', null=True, verbose_name='GRN Created Date')),
                ('seller_invoice_no', models.CharField(blank=True, help_text='Invoice number from seller', max_length=200, null=True, verbose_name='Seller Invoice Number')),
                ('supplier_invoice_date', models.DateField(blank=True, help_text='Date of supplier invoice', null=True, verbose_name='Supplier Invoice Date')),
                ('supplier', models.CharField(blank=True, db_index=True, help_text='Supplier/vendor name', max_length=500, null=True, verbose_name='Supplier')),
                ('concerned_person', models.CharField(blank=True, help_text='Person responsible for the transaction', max_length=255, null=True, verbose_name='Concerned Person')),
                ('pickup_location', models.CharField(blank=True, help_text='Pickup location name', max_length=500, null=True, verbose_name='Pickup Location')),
                ('pickup_gstin', models.CharField(blank=True, help_text='GST Identification Number for pickup location', max_length=15, null=True, verbose_name='Pickup GSTIN')),
                ('pickup_code', models.CharField(blank=True, help_text='Pickup location code', max_length=100, null=True, verbose_name='Pickup Code')),
                ('pickup_city', models.CharField(blank=True, help_text='Pickup city', max_length=255, null=True, verbose_name='Pickup City')),
                ('pickup_state', models.CharField(blank=True, help_text='Pickup state', max_length=255, null=True, verbose_name='Pickup State')),
                ('delivery_location', models.CharField(blank=True, help_text='Delivery location name', max_length=500, null=True, verbose_name='Delivery Location')),
                ('delivery_gstin', models.CharField(blank=True, help_text='GST Identification Number for delivery location', max_length=15, null=True, verbose_name='Delivery GSTIN')),
                ('delivery_code', models.CharField(blank=True, help_text='Delivery location code', max_length=100, null=True, verbose_name='Delivery Code')),
                ('delivery_city', models.CharField(blank=True, help_text='Delivery city', max_length=255, null=True, verbose_name='Delivery City')),
                ('delivery_state', models.CharField(blank=True, help_text='Delivery state', max_length=255, null=True, verbose_name='Delivery State')),
                ('price', models.DecimalField(blank=True, decimal_places=4, help_text='Unit price of the item', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0000'))], verbose_name='Price')),
                ('received_qty', models.DecimalField(blank=True, decimal_places=4, help_text='Quantity received', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0000'))], verbose_name='Received Quantity')),
                ('returned_qty', models.DecimalField(blank=True, decimal_places=4, help_text='Quantity returned', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0000'))], verbose_name='Returned Quantity')),
                ('discount', models.DecimalField(blank=True, decimal_places=2, help_text='Discount amount', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Discount')),
                ('tax', models.DecimalField(blank=True, decimal_places=2, help_text='Tax rate percentage', max_digits=5, null=True, verbose_name='Tax Rate')),
                ('sgst_tax', models.DecimalField(blank=True, decimal_places=2, help_text='State GST rate percentage', max_digits=5, null=True, verbose_name='SGST Tax Rate')),
                ('sgst_tax_amount', models.DecimalField(blank=True, decimal_places=2, help_text='State GST amount', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='SGST Tax Amount')),
                ('cgst_tax', models.DecimalField(blank=True, decimal_places=2, help_text='Central GST rate percentage', max_digits=5, null=True, verbose_name='CGST Tax Rate')),
                ('cgst_tax_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Central GST amount', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='CGST Tax Amount')),
                ('igst_tax', models.DecimalField(blank=True, decimal_places=2, help_text='Integrated GST rate percentage', max_digits=5, null=True, verbose_name='IGST Tax Rate')),
                ('igst_tax_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Integrated GST amount', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='IGST Tax Amount')),
                ('cess', models.DecimalField(blank=True, decimal_places=2, help_text='Cess amount', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Cess')),
                ('subtotal', models.DecimalField(blank=True, decimal_places=2, help_text='Subtotal before taxes', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Subtotal')),
                ('vat_percent', models.CharField(blank=True, help_text='VAT percentage', max_length=20, null=True, verbose_name='VAT Percentage')),
                ('vat_amount', models.CharField(blank=True, help_text='VAT amount', max_length=50, null=True, verbose_name='VAT Amount')),
                ('item_tcs_percent', models.CharField(blank=True, help_text='Item TCS percentage', max_length=20, null=True, verbose_name='Item TCS Percentage')),
                ('item_tcs_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Item TCS amount', max_digits=15, null=True, verbose_name='Item TCS Amount')),
                ('tax_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Total tax amount', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Total Tax Amount')),
                ('bill_tcs', models.DecimalField(blank=True, decimal_places=2, help_text='Bill TCS amount', max_digits=15, null=True, verbose_name='Bill TCS')),
                ('delivery_charges', models.DecimalField(blank=True, decimal_places=2, help_text='Delivery charges', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Delivery Charges')),
                ('delivery_charges_tax_percent', models.DecimalField(blank=True, decimal_places=2, help_text='Tax percentage on delivery charges', max_digits=5, null=True, verbose_name='Delivery Charges Tax Percentage')),
                ('additional_charges', models.DecimalField(blank=True, decimal_places=2, help_text='Additional charges', max_digits=15, null=True, verbose_name='Additional Charges')),
                ('inv_discount', models.DecimalField(blank=True, decimal_places=2, help_text='Invoice level discount', max_digits=15, null=True, verbose_name='Invoice Discount')),
                ('round_off', models.DecimalField(blank=True, decimal_places=2, help_text='Round off amount', max_digits=15, null=True, verbose_name='Round Off')),
                ('total', models.DecimalField(blank=True, decimal_places=2, help_text='Total amount including all taxes and charges', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Total Amount')),
                ('attachment_upload_date', models.DateField(blank=True, help_text='Date when attachments were uploaded', null=True, verbose_name='Attachment Upload Date')),
                ('attachment_1', models.URLField(blank=True, help_text='URL to attachment 1', max_length=1000, null=True, verbose_name='Attachment 1')),
                ('attachment_2', models.URLField(blank=True, help_text='URL to attachment 2', max_length=1000, null=True, verbose_name='Attachment 2')),
                ('attachment_3', models.URLField(blank=True, help_text='URL to attachment 3', max_length=1000, null=True, verbose_name='Attachment 3')),
                ('attachment_4', models.URLField(blank=True, help_text='URL to attachment 4', max_length=1000, null=True, verbose_name='Attachment 4')),
                ('attachment_5', models.URLField(blank=True, help_text='URL to attachment 5', max_length=1000, null=True, verbose_name='Attachment 5')),
                ('extracted_data', models.BooleanField(default=False, help_text='Whether invoice data has been extracted from this GRN item', verbose_name='Extracted Data')),
                ('upload_batch_id', models.CharField(db_index=True, help_text='Unique identifier for the upload session', max_length=100, verbose_name='Upload Batch ID')),
                ('uploaded_filename', models.CharField(help_text='Original filename of the uploaded file', max_length=255, verbose_name='Uploaded Filename')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Item-wise GRN Record',
                'verbose_name_plural': 'Item-wise GRN Records',
                'db_table': 'item_wise_grn',
                'ordering': ['s_no', 'grn_created_at'],
                'indexes': [models.Index(fields=['grn_no'], name='item_wise_g_grn_no_a81b6d_idx'), models.Index(fields=['po_no'], name='item_wise_g_po_no_f2cd56_idx'), models.Index(fields=['sku_code'], name='item_wise_g_sku_cod_615ab8_idx'), models.Index(fields=['supplier'], name='item_wise_g_supplie_fe7c6c_idx'), models.Index(fields=['upload_batch_id'], name='item_wise_g_upload__3dbe07_idx'), models.Index(fields=['grn_created_at'], name='item_wise_g_grn_cre_1a72a7_idx'), models.Index(fields=['supplier_invoice_date'], name='item_wise_g_supplie_aeaf61_idx'), models.Index(fields=['created_at'], name='item_wise_g_created_c975ef_idx')],
                'unique_together': {('grn_no', 'po_no', 'sku_code', 'upload_batch_id')},
            },
        ),
        migrations.CreateModel(
            name='PoGrn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('s_no', models.IntegerField(help_text='Serial number from the uploaded file', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Serial Number')),
                ('location', models.CharField(help_text='Store/warehouse location', max_length=255, verbose_name='Location')),
                ('po_number', models.CharField(db_index=True, help_text='Purchase Order Number', max_length=100, verbose_name='PO Number')),
                ('po_creation_date', models.DateField(help_text='Date when the PO was created', verbose_name='PO Creation Date')),
                ('no_item_in_po', models.IntegerField(help_text='Total number of items in the purchase order', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of Items in PO')),
                ('po_amount', models.DecimalField(decimal_places=2, help_text='Total amount of the purchase order', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='PO Amount')),
                ('po_status', models.CharField(help_text='Status of the purchase order (e.g., Completed, In Process)', max_length=50, verbose_name='PO Status')),
                ('supplier_name', models.CharField(db_index=True, help_text='Name of the supplier/vendor', max_length=255, verbose_name='Supplier Name')),
                ('concerned_person', models.CharField(blank=True, help_text='Person responsible for the PO', max_length=255, null=True, verbose_name='Concerned Person')),
                ('grn_number', models.CharField(blank=True, db_index=True, help_text='Goods Receipt Note Number', max_length=100, null=True, verbose_name='GRN Number')),
                ('grn_creation_date', models.DateField(blank=True, help_text='Date when the GRN was created', null=True, verbose_name='GRN Creation Date')),
                ('no_item_in_grn', models.IntegerField(blank=True, help_text='Total number of items in the goods receipt note', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of Items in GRN')),
                ('received_status', models.CharField(blank=True, help_text='Status of goods receipt (e.g., Received, Pending)', max_length=50, null=True, verbose_name='Received Status')),
                ('grn_subtotal', models.DecimalField(blank=True, decimal_places=2, help_text='Subtotal amount before tax in GRN', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='GRN Subtotal')),
                ('grn_tax', models.DecimalField(blank=True, decimal_places=2, help_text='Tax amount in GRN', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='GRN Tax')),
                ('grn_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Total amount including tax in GRN', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='GRN Amount')),
                ('upload_batch_id', models.CharField(db_index=True, help_text='Unique identifier for the upload session', max_length=100, verbose_name='Upload Batch ID')),
                ('uploaded_filename', models.CharField(help_text='Original filename of the uploaded file', max_length=255, verbose_name='Uploaded Filename')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'PO GRN Record',
                'verbose_name_plural': 'PO GRN Records',
                'db_table': 'po_grn',
                'ordering': ['s_no', 'po_creation_date'],
                'indexes': [models.Index(fields=['po_number'], name='po_grn_po_numb_94133c_idx'), models.Index(fields=['grn_number'], name='po_grn_grn_num_0c8acb_idx'), models.Index(fields=['supplier_name'], name='po_grn_supplie_244948_idx'), models.Index(fields=['upload_batch_id'], name='po_grn_upload__9fa8ba_idx'), models.Index(fields=['po_creation_date'], name='po_grn_po_crea_536a64_idx'), models.Index(fields=['grn_creation_date'], name='po_grn_grn_cre_e86286_idx')],
                'unique_together': {('po_number', 'grn_number', 'upload_batch_id')},
            },
        ),
    ]
